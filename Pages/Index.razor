@page "/"
@inject IJSRuntime JsRuntime;
@using ChessWasm.Models;
@using ChessWasm.Services;
@using ChessWasm.Shared;
@using System.Diagnostics

<div class="main">
    <div>
        <button class="btn btn-success btn-start" @onclick="StartGame">New Game</button>
        <button class="btn btn-primary btn-start" @onclick="StartPerft">Perft</button>
        <div class="status-box">
            <code>@((MarkupString)statusText)</code>
        </div>
    </div>

    <div class="boards">
        <div class="main-board">
            <ChessBoard /> 
        </div>
        <div class="bitboards">
            <BitBoard Image="Rook_white" @bind-Bits="@(board.WRookAttacks)" />
            <BitBoard Image="Rook_black" @bind-Bits="@(board.BRookAttacks)" />
            <BitBoard Image="Knight_white" @bind-Bits="@(board.WKnightAttacks)" />
            <BitBoard Image="Knight_black" @bind-Bits="@(board.BKnightAttacks)" />
            <BitBoard Image="Bishop_white" @bind-Bits="@(board.WBishopAttacks)" />
            <BitBoard Image="Bishop_black" @bind-Bits="@(board.BBishopAttacks)" />
            <BitBoard Image="Queen_white" @bind-Bits="@(board.WQueenAttacks)" />
            <BitBoard Image="Queen_black" @bind-Bits="@(board.BQueenAttacks)" />
            <BitBoard Image="King_white" @bind-Bits="@(board.WKingAttacks)" />
            <BitBoard Image="King_black" @bind-Bits="@(board.BKingAttacks)" />
            <BitBoard Image="Pawn_white" @bind-Bits="@(board.WPawnAttacks)" />
            <BitBoard Image="Pawn_black" @bind-Bits="@(board.BPawnAttacks)" />
        </div>
    </div>
</div>

@code {
    Board board = new Board();
    string statusText = "";

    private void StartGame()
    {
        ResetStatusText();
        AppendStatusText("Initializing Game <br />");
        GameService.StartGame();
        board = GameService.CurrentGame.Board;
        GameService.BoardChanged += UpdateBoard;

        AppendStatusText("Initializing Move tables <br />");
        MagicService.Initialize();

        AppendStatusText("Game started <br />");
        this.StateHasChanged();
    }

    private void AppendStatusText(string text)
    {
        statusText += text;
        StateHasChanged();
    }

    private void ResetStatusText()
    {
        statusText = "";
        StateHasChanged();
    }

    private async void StartPerft()
    {
        ResetStatusText();
        AppendStatusText("Initializing Perft <br />");
        MagicService.Initialize();

        AppendStatusText("Initializing Move tables <br />");

        Stopwatch watch = new Stopwatch();
        for(int i = 1; i < 6; i++)
        {
            watch.Restart();
            var perft = MoveService.Perft(new Board(), i);
            AppendStatusText($"Perft at depth {i} is: {perft} (Elapsed: {watch.Elapsed.Seconds} seconds) <br />");
            await Task.Delay(1);
        }
    }

    private void UpdateBoard(Board board)
    {
        this.StateHasChanged();
    }
}
