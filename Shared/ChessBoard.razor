@namespace ChessWasm.Shared
@using ChessWasm.Models
@using ChessWasm.Services

@if(winnerText != null)
{
    <div class="winner-text">@(winnerText)</div>
}
@if(promotionMoves.Count > 0)
{
    <div class="promotionOptions">
        <button class="btn btn-primary" @onclick="(() => Promote(PromotionType.Queen))">Queen</button>
        <button class="btn btn-primary" @onclick="(() => Promote(PromotionType.Knight))">Knight</button>
        <button class="btn btn-primary" @onclick="(() => Promote(PromotionType.Bishop))">Bishop</button>
        <button class="btn btn-primary" @onclick="(() => Promote(PromotionType.Rook))">Rook</button>
    </div>
}
<div class="board">
    @for(int row = 7; row >= 0; row--)
    {
        <div class="board-row">
            @for(int file = 0; file < 8; file++)
            {
                int position = Utils.RowFileToPosition(row, file);
                <div class="square @(GetClassForSquare(row, file))" @onclick="(() => SquareClicked(position))">
                    @if(SquareHasPiece(position))
                    {
                        <img src="/assets/@(GetImageForSquare(position)).png" />
                    }
                    @if(IsPossibleMove(position))
                    {
                        <div class="possible-move" />
                    }
                </div>
            }
        </div>
    }
</div>
@code {
    private int highlightedPosition = -1;
    private string winnerText = null;

    private List<Move> promotionMoves = new List<Move>();

    public ChessBoard() 
    {
        GameService.BoardChanged += UpdateBoard;
    }

    private void UpdateBoard(Board board)
    {
        highlightedPosition = -1;
        this.StateHasChanged();
    }

    private string GetClassForSquare(int row, int file) 
    {
        string colorClass =  
            row % 2 == 0 
                ? (file % 2 == 0 ? "square-light" : "square-dark")
                : (file % 2 == 0 ? "square-dark" : "square-light");

        return colorClass + (Utils.RowFileToPosition(row, file) == highlightedPosition ? "-highlight" : "");
    }

    private bool IsPossibleMove(int position) 
    {
        if(GameService.CurrentGame == null || GameService.CurrentGame.PossibleMoves == null || highlightedPosition == -1) 
        {
            return false;
        }

        var movesFromSquare = GameService.CurrentGame.PossibleMoves.Where(move => move.From == highlightedPosition);
        return movesFromSquare.Any(move => move.To == position);
    }

    private void Promote(PromotionType type)
    {
        var move = promotionMoves.First(m => m.PromotionType == type);
        GameService.TryMakeMove(move);
        if(GameService.CurrentGame.Winner != 0)
        {
            winnerText = $"{GameService.CurrentGame.Winner.ToString()} has won!";
            GameService.ClearGame();
            this.StateHasChanged();
        }
        highlightedPosition = -1;
        promotionMoves = new List<Move>();
    }

    private void SquareClicked(int newPosition) 
    {
        if(GameService.CurrentGame == null)
        {
            return;
        }
        promotionMoves = new List<Move>();

        var movesFromSquare = GameService.CurrentGame.PossibleMoves.Where(move => move.From == highlightedPosition);
        if(movesFromSquare.Any()) 
        {
            IEnumerable<Move> moves = movesFromSquare.Where(move => move.To == newPosition);
            if(moves.Any()) 
            {
                if(moves.Count() > 1)
                {
                    promotionMoves = moves.ToList();
                }
                else
                {
                    GameService.TryMakeMove(moves.First());
                    if(GameService.CurrentGame.Winner != 0)
                    {
                        winnerText = $"{GameService.CurrentGame.Winner.ToString()} has won!";
                        GameService.ClearGame();
                        this.StateHasChanged();
                    }
                    highlightedPosition = -1;
                    return;
                }
            }
        }

        if(highlightedPosition == newPosition) 
        {
            highlightedPosition = -1;
        }
        else
        {
            highlightedPosition = newPosition;
        }
    }

    private bool SquareHasPiece(int position)
    {
        return GameService.CurrentGame != null && GameService.CurrentGame.Board.Occupied.NthBitSet(position);
    }

    private string GetImageForSquare(int position)
    {
        if(GameService.CurrentGame == null)
        {
            return null;
        }

        var board = GameService.CurrentGame.Board;

        if(board.WRooks.NthBitSet(position)) return "Rook_white";
        if(board.WKnights.NthBitSet(position)) return "Knight_white";
        if(board.WBishops.NthBitSet(position)) return "Bishop_white";
        if(board.WQueen.NthBitSet(position)) return "Queen_white";
        if(board.WKing.NthBitSet(position)) return "King_white";
        if(board.WPawns.NthBitSet(position)) return "Pawn_white";
        if(board.BRooks.NthBitSet(position)) return "Rook_black";
        if(board.BKnights.NthBitSet(position)) return "Knight_black";
        if(board.BBishops.NthBitSet(position)) return "Bishop_black";
        if(board.BQueen.NthBitSet(position)) return "Queen_black";
        if(board.BKing.NthBitSet(position)) return "King_black";
        if(board.BPawns.NthBitSet(position)) return "Pawn_black";

        return null;
    }
}
