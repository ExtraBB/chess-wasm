@namespace ChessWasm.Shared
@using ChessWasm.Models
@using ChessWasm.Services

@if(winnerText != null)
{
    <div class="winner-text">@(winnerText)</div>
}
<div class="board">
    @for(int row = 0; row < 8; row++)
    {
        <div class="board-row">
            @for(int file = 0; file < 8; file++)
            {
                int position = Utils.RowFileToPosition(row, file);
                <div class="square @(GetClassForSquare(row, file))" @onclick="(() => SquareClicked(position))">
                    @if(squares != null && squares[position] != 0)
                    {
                        <img src="/assets/@(GetImageForPiece(squares[position])).png" />
                    }
                    @if(IsPossibleMove(position))
                    {
                        <div class="possible-move" />
                    }
                </div>
            }
        </div>
    }
</div>
@code {
    private Piece[] squares;
    private int highlightedPosition = -1;
    private string winnerText = null;

    public ChessBoard() 
    {
        GameService.BoardChanged += UpdateBoard;
    }

    private void UpdateBoard(Board board)
    {
        squares = board.Squares;
        highlightedPosition = -1;
        this.StateHasChanged();
    }

    private string GetClassForSquare(int row, int file) 
    {
        string colorClass =  
            row % 2 == 0 
                ? (file % 2 == 0 ? "square-light" : "square-dark")
                : (file % 2 == 0 ? "square-dark" : "square-light");

        return colorClass + (Utils.RowFileToPosition(row, file) == highlightedPosition ? "-highlight" : "");
    }

    private bool IsPossibleMove(int position) 
    {
        if(GameService.CurrentGame == null || GameService.CurrentGame.PossibleMoves == null || highlightedPosition == -1) 
        {
            return false;
        }

        return GameService.CurrentGame.PossibleMoves.ContainsKey(highlightedPosition) && GameService.CurrentGame.PossibleMoves[highlightedPosition].Any(move => move.To == position);
    }

    private string GetImageForPiece(Piece piece) 
    {
        string color = piece.HasFlag(Piece.White) ? "white" : "black";
        return $"{(piece & ~Piece.White & ~Piece.Black).ToString()}_{color}";
    }

    private void SquareClicked(int newPosition) 
    {
        if(GameService.CurrentGame.PossibleMoves.ContainsKey(highlightedPosition)) 
        {
            Move move = GameService.CurrentGame.PossibleMoves[highlightedPosition].FirstOrDefault(move => move.To == newPosition);
            if(move != null) 
            {
                GameService.TryMakeMove(move);
                if(GameService.CurrentGame.Winner != 0)
                {
                    string winner = GameService.CurrentGame.Winner == Piece.White ? "White" : "Black";
                    winnerText = $"{winner} has won!";
                    GameService.ClearGame();
                    squares = null;
                    this.StateHasChanged();
                }
                highlightedPosition = -1;
                return;
            }
        }

        if(highlightedPosition == newPosition) 
        {
            highlightedPosition = -1;
        }
        else
        {
            highlightedPosition = newPosition;
        }
    }
}
