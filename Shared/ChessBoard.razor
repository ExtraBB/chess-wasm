@namespace ChessWasm.Shared
@using ChessWasm.Models
@using ChessWasm.Services

<div class="board">
    @for(int x = 0; x < 8; x++)
    {
        <div class="board-row">
            @for(int y = 0; y < 8; y++)
            {
                int row = x, col = y;
                <div class="square @(GetClassForSquare(x, y))" @onclick="(() => SquareClicked(row, col))">
                    @if(squares != null && squares[x * 8 + y] != 0)
                    {
                        <img src="/assets/@(GetImageForPiece(squares[x * 8 + y])).png" />
                    }
                </div>
            }
        </div>
    }
</div>
@code {
    private Piece[] squares;
    private (int x, int y) HighlightedPiece = (-1,-1);

    public ChessBoard() 
    {
        GameService.BoardChanged += UpdateBoard;
    }

    private void UpdateBoard(Board board)
    {
        squares = board.Squares;
        this.StateHasChanged();
    }

    private string GetClassForSquare(int x, int y) 
    {
        string colorClass =  
            x % 2 == 0 
                ? (y % 2 == 0 ? "square-dark" : "square-light")
                : (y % 2 == 0 ? "square-light" : "square-dark");

        return colorClass + (HighlightedPiece.x == x && HighlightedPiece.y == y ? "-highlight" : "");
    }

    private string GetImageForPiece(Piece piece) 
    {
        string color = piece.HasFlag(Piece.White) ? "white" : "black";
        return $"{(piece & ~Piece.White & ~Piece.Black).ToString()}_{color}";
    }

    private void SquareClicked(int x, int y) 
    {
        if(HighlightedPiece.x == x && HighlightedPiece.y == y) 
        {
            HighlightedPiece = (-1, -1);
        }
        else
        {
            HighlightedPiece = (x,y);
        }
    }
}
